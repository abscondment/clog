(I believe) My parents bought their first computer the year I was born.  It was a <a href="http://www.old-computers.com/museum/computer.asp?c=549">Kaypro IV</a>--a marvel in its day.  A screaming 2.5Mhz processor coupled with 64Kb RAM (as Bill Gates said, who would ever need more?).  Oh...and CP/M.  (Using CP/M, one had to insert the disk with the OS while booting, then insert another with whatever programs were desired.  Lots of disk shuffling.  Great fun.)

Kaypros were bundled with a diskette containing M- and O-BASIC from the 1984 <a href="http://www.old-computers.com/museum/computer.asp?c=954">Kaypro 2X</a>, and my parent's one had this great software, too.

On this system I encountered some of the software giants:
<a href="http://www.rickadams.org/adventure/">Colossal Cave Adventure</a>, <a href="http://www.dunnington.u-net.com/public/startrek/">Star Trek</a>, <a href="http://www.wurb.com/if/game/442">Hunt the Wumpus</a>, and so on.

The last two were written in one form of BASIC or another; here I learned how to program.  Moving to Object-Oriented design more abstract concepts wasn't too hard, having this base.  Now I am finding it even more helpful, since my <a href="http://www.cs.washington.edu/education/courses/cse410/04sp/">Computer Systems</a> class has MIPS Assembly as the main programming language--having to model higher level code with simple "branch" statements (which the BASIC <a href="http://www.geocities.com/qbasicstation/tutor/advanced/a_goto.html">GOTO</a> command makes use of when converted to machine code, I'm sure) is really easy when one has already written programs requiring such sticky shenanigans that were thousands of lines long.

Granted, I really like <acronym title="Object Oriented">OO</acronym>--I like it better than all this branching silliness.  But it's still cool.